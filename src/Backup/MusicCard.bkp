import React, { Component } from 'react';
import PropTypes from 'prop-types';
// import { addSong } from '../services/favoriteSongsAPI';
import { addSong, removeSong, getFavoriteSongs } from '../services/favoriteSongsAPI';
import Loading from './Loading';

class MusicCard extends Component {
  constructor() {
    super();
    this.state = {
      isLoading: false,
      isFavorited: false,
      favorites: [], // array que guarda todas as musicas favoritadas p/ recuperação
    };
  }

  componentDidMount() {
    this.recoverFavorites();
  }

  // addToFavorite = async () => {
  //   const { trackId } = this.props;
  //   this.setState({
  //     isLoading: true,
  //   });
  //   await addSong({ trackId });
  //   // await getFavoriteSongs(); // req 10
  //   this.setState({
  //     isLoading: false,
  //     isFavorited: true,
  //   });
  // }

  removeFavorite = async (musicData) => {
    const { favorites } = this.state;
    const { trackId } = musicData;
    const favorite = favorites.some((ai) => ai.trackId === trackId);
    if (favorite) await removeSong(musicData);
  }

  addToFavorite = async ({ trackName, artwork, trackId }) => {
    const musicData = { trackName, artwork, trackId }; // LEMBRAR - reconstroi music, depois passar via props
    this.setState((prevState) => ({ isFavorited: !(prevState.isFavorited) }),
      async () => {
        this.setState({ isLoading: true });
        await addSong(musicData);
        this.setState({ isLoading: false });
        this.removeFavorite(musicData);
      });
  }

  recoverFavorites = async () => { // funcionando corretamente
    this.setState({ isLoading: true });
    const favoriteMusics = await getFavoriteSongs();
    this.setState({
      favorites: favoriteMusics,
      isLoading: false,
    });
  }

  render() {
    const { trackName, trackId, artwork } = this.props;
    const { isLoading, isFavorited } = this.state;
    return (
      <div>
        { isLoading ? (<Loading />
        ) : (
          <div>
            {trackName}
            <audio
              data-testid="audio-component"
              src={ artwork }
              controls
            >
              <track kind="captions" />
              `O seu navegador não suporta o elemento`
              <code>audio</code>
              .
            </audio>
            <input
              data-testid={ `checkbox-music-${trackId}` }
              type="checkbox"
              onChange={ () => this.addToFavorite({ trackName, artwork, trackId }) }
              checked={ isFavorited }
            />

          </div>
        )}
      </div>
    );
  }
}

MusicCard.propTypes = {
  trackName: PropTypes.string,
  trackId: PropTypes.string,
  artwork: PropTypes.string,
}.isRequired;

export default MusicCard;
